/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ai.corca.adcio_placement.model

import ai.corca.adcio_placement.model.CreditHistory
import ai.corca.adcio_placement.model.IamportPaymentVBank
import ai.corca.adcio_placement.model.TransactionPaymentCard

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id 
 * @param impUid 
 * @param impVBank 
 * @param paymentCard 
 * @param clientId 
 * @param amount 
 * @param currency 
 * @param paymentMethod 
 * @param status 
 * @param createdAt 
 * @param paidAt 
 * @param category 
 * @param type 
 * @param failedReason 
 * @param creditHistory 
 */


data class Transaction (

    @Json(name = "id")
    val id: kotlin.String,

    @Json(name = "impUid")
    val impUid: kotlin.String?,

    @Json(name = "impVBank")
    val impVBank: IamportPaymentVBank?,

    @Json(name = "paymentCard")
    val paymentCard: TransactionPaymentCard,

    @Json(name = "clientId")
    val clientId: kotlin.String,

    @Json(name = "amount")
    val amount: java.math.BigDecimal,

    @Json(name = "currency")
    val currency: Transaction.Currency,

    @Json(name = "paymentMethod")
    val paymentMethod: Transaction.PaymentMethod,

    @Json(name = "status")
    val status: Transaction.Status,

    @Json(name = "createdAt")
    val createdAt: java.time.OffsetDateTime,

    @Json(name = "paidAt")
    val paidAt: java.time.OffsetDateTime?,

    @Json(name = "category")
    val category: Transaction.Category,

    @Json(name = "type")
    val type: Transaction.Type,

    @Json(name = "failedReason")
    val failedReason: Transaction.FailedReason?,

    @Json(name = "creditHistory")
    val creditHistory: CreditHistory

) {

    /**
     * 
     *
     * Values: kRW,uSD,vND
     */
    @JsonClass(generateAdapter = false)
    enum class Currency(val value: kotlin.String) {
        @Json(name = "KRW") kRW("KRW"),
        @Json(name = "USD") uSD("USD"),
        @Json(name = "VND") vND("VND");
    }
    /**
     * 
     *
     * Values: card,directBank,vBank,hPP
     */
    @JsonClass(generateAdapter = false)
    enum class PaymentMethod(val value: kotlin.String) {
        @Json(name = "Card") card("Card"),
        @Json(name = "DirectBank") directBank("DirectBank"),
        @Json(name = "VBank") vBank("VBank"),
        @Json(name = "HPP") hPP("HPP");
    }
    /**
     * 
     *
     * Values: pending,ready,completed,unauthorized,failed,closed,cancelled
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "Pending") pending("Pending"),
        @Json(name = "Ready") ready("Ready"),
        @Json(name = "Completed") completed("Completed"),
        @Json(name = "Unauthorized") unauthorized("Unauthorized"),
        @Json(name = "Failed") failed("Failed"),
        @Json(name = "Closed") closed("Closed"),
        @Json(name = "Cancelled") cancelled("Cancelled");
    }
    /**
     * 
     *
     * Values: aUTOCHARGE,sUBSCRIPTION
     */
    @JsonClass(generateAdapter = false)
    enum class Category(val value: kotlin.String) {
        @Json(name = "AUTO_CHARGE") aUTOCHARGE("AUTO_CHARGE"),
        @Json(name = "SUBSCRIPTION") sUBSCRIPTION("SUBSCRIPTION");
    }
    /**
     * 
     *
     * Values: pAY,rEFUND
     */
    @JsonClass(generateAdapter = false)
    enum class Type(val value: kotlin.String) {
        @Json(name = "PAY") pAY("PAY"),
        @Json(name = "REFUND") rEFUND("REFUND");
    }
    /**
     * 
     *
     * Values: cLOSEDCARD,bALANCEINSUFFICIENT,eTC
     */
    @JsonClass(generateAdapter = false)
    enum class FailedReason(val value: kotlin.String) {
        @Json(name = "CLOSED_CARD") cLOSEDCARD("CLOSED_CARD"),
        @Json(name = "BALANCE_INSUFFICIENT") bALANCEINSUFFICIENT("BALANCE_INSUFFICIENT"),
        @Json(name = "ETC") eTC("ETC");
    }
}

